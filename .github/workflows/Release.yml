name: Release

on:
  push:
    tags:
      - 'v*'

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release

jobs:
  build-linux:
    # The CMake configure and build commands are platform agnostic and should work equally well on Windows or Mac.
    # You can convert this to a matrix build if you need cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3
    - name: QSetup Ninja
      uses: ashutoshvarma/setup-ninja@v1.1
      with:
        version: 1.11.1
      
    - name: Install libtiff
      run: sudo apt install libtiff-dev -y

    - name: Configure CMake
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: cmake --preset default

    - name: Build
      # Build your program with the given configuration
      run: cmake --build --preset default

    - name: Test
      working-directory: ${{github.workspace}}/cmake-build-default
      # Execute tests defined by the CMake configuration.
      # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
      run: ./totiff
    - name: Create Release
      id: create_release
      uses: softprops/action-gh-release@v1
      with:
          name: ${{ github.ref_name }}
          draft: false
          prerelease: false
          generate_release_notes: false
    - name: Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ needs.create_release.outputs.tag-name }}
        files: ${{github.workspace}}/cmake-build-default/totiff
  build-windows:
    # The CMake configure and build commands are platform agnostic and should work equally well on Windows or Mac.
    # You can convert this to a matrix build if you need cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: windows-latest

    steps:
    - uses: actions/checkout@v3
    - name: QSetup Ninja
      uses: ashutoshvarma/setup-ninja@v1.1
      with:
        version: 1.11.1

    - name: Configure CMake
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: cmake --preset default

    - name: Build
      # Build your program with the given configuration
      run: cmake --build --preset default

    - name: Test
      working-directory: ${{github.workspace}}/cmake-build-default
      # Execute tests defined by the CMake configuration.
      # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
      run: dir
    - name: zip
      run: choco install zip
    - name: zip
      run: zip -j totiff-win.zip ${{github.workspace}}/cmake-build-default/totiff.exe ${{github.workspace}}/cmake-build-default/tiffd.dll
    - name: Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ needs.create_release.outputs.tag-name }}
        files: totiff-win.zip
